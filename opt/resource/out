#! /usr/bin/env python3

from datetime import datetime
from contextlib import contextmanager
from email import encoders
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.audio import MIMEAudio
from email.mime.multipart import MIMEMultipart
from html2text import html2text
import json
import os
from smtplib import SMTP
import subprocess as sub
import sys
import time
import glob
import mimetypes

from inlinestyler.utils import inline_css
from jinja2 import Template

from common import get_payload


def put(src):
    print("Using dir {}".format(src), file=sys.stderr)
    payload = get_payload()
    template_vars = get_template_vars(src, payload)
    mime_subtype = get_mime_subtype(payload)
    subject = get_subject(src, payload, template_vars)
    body = get_message(src, payload, template_vars)

    # https://stackoverflow.com/a/3984262/1883900
    message = MIMEMultipart('alternative')
    if mime_subtype == 'html':
        message.attach(MIMEText(html2text(body), 'plain'))

    message.attach(MIMEText(body, mime_subtype))

    message['Subject'] = subject
    message['From'] = get_sender(payload)
    message['To'] = ', '.join(get_recipients(src, payload))
    add_attachments(src, message, payload)

    with postfix():
        with SMTP(get_host(payload)) as smtp:
            smtp.send_message(message)
            # This is lame, but it seems to take a while until postfix delivers the message
            time.sleep(1)

    print(json.dumps({
        'version': {'version': datetime.isoformat(datetime.now())},
        'metadata': [
            {'name': 'subject', 'value': subject},
        ]
    }))


def get_sender(payload):
    return get_value_from_payload(payload, 'source', 'from')

def get_host(payload):
    return get_value_from_payload(payload, 'source', 'host', default='localhost', optional=True)

def get_recipients(src, payload):
    recipients = get_value_from_payload(payload, 'params', 'to', optional=True)
    if not recipients:
        fname = get_value_from_payload(payload, 'params', 'to_file')
        with open(os.path.join(src, fname)) as fp:
            recipients = fp.read().split('\n')

    if not isinstance(recipients, list):
        raise ValueError("The recipients parameter has to be a list!")
    return recipients


def add_attachments(src, message, payload):
    attachments = get_value_from_payload(payload, 'params', 'attachments', default=[], optional=True)
    for path in attachments:
        if '*' in path:
            for file_name in glob.glob(os.path.join(src, path)):
                message.attach(get_attachment(src, file_name))
        else:
            message.attach(get_attachment(src, path))


def get_attachment(src, file_name):

    file_name_path = os.path.join(src, file_name)
    ctype, encoding = mimetypes.guess_type(file_name_path)

    if ctype is None or encoding is not None:
        # no guess could be made, or the file is encoded (compressed), so use a generic bag-of-bits type.
        ctype = 'application/octet-stream'

    maintype, subtype = ctype.split('/', 1)

    if maintype == 'text':
        fp = open(file_name_path)
        # note: we should handle calculating the charset
        attachment = MIMEText(fp.read(), _subtype=subtype)
        fp.close()

    elif maintype == 'image':
        fp = open(file_name_path, 'rb')
        attachment = MIMEImage(fp.read(), _subtype=subtype)
        fp.close()

    elif maintype == 'audio':
        fp = open(file_name_path, 'rb')
        attachment = MIMEAudio(fp.read(), _subtype=subtype)
        fp.close()

    else:
        fp = open(file_name_path, 'rb')
        attachment = MIMEBase(maintype, subtype)
        attachment.set_payload(fp.read())
        fp.close()
        # encode the payload using Base64
        encoders.encode_base64(attachment)

    attachment.add_header('Content-Disposition', 'attachment', filename=os.path.basename(file_name))

    return attachment


def get_mime_subtype(payload):
    return get_value_from_payload(payload, 'params', 'type', default='html', optional=True)


def get_subject(src, payload, template_vars):
    subject = get_value_from_payload(payload, 'params', 'subject_text', optional=True)
    if not subject:
        fname = get_value_from_payload(payload, 'params', 'subject')
        with open(os.path.join(src, fname)) as fp:
            subject = fp.read()
    return Template(subject).render(template_vars)


def get_message(src, payload, template_vars):
    message = get_value_from_payload(payload, 'params', 'body_text', optional=True)
    if not message:
        fname = get_value_from_payload(payload, 'params', 'body')
        with open(os.path.join(src, fname)) as fp:
            message = fp.read()

    inline = get_value_from_payload(payload, 'params', 'inline_css', default=True, optional=True)
    mime_subtype = get_mime_subtype(payload)
    message = Template(message).render(template_vars)

    if mime_subtype == 'html' and inline:
        message = inline_css(message)
    return message

def get_template_vars(src, payload):
    fname = get_value_from_payload(payload, 'params', 'vars', optional=True)
    template_vars = dict(os.environ)
    if fname:
        with open(os.path.join(src, fname)) as fp:
            template_vars.update(json.load(fp))
    return template_vars


def get_value_from_payload(payload, section, key, default=None, optional=False):
    try:
        return payload[section][key]
    except KeyError:
        if not optional:
            raise ValueError("Unable to extract '{}' from '{}'".format(key, section))
    return default


@contextmanager
def postfix():
    postfix_cmd('start')
    yield
    postfix_cmd('flush')
    postfix_cmd('stop')


def postfix_cmd(command):
    devnull = open(os.devnull, 'w')
    sub.check_call(['postfix', command], stdout=devnull, stderr=sub.STDOUT)


if __name__ == '__main__':
    try:
        put(sys.argv[1])
    except Exception as e:
        print(str(e), file=sys.stderr, flush=True)
